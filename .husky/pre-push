#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ª–∏ –≤–µ—Ç–∫–∞
if [ -z "$CURRENT_BRANCH" ]; then
  echo "‚ùå –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (detached HEAD)"
  exit 0
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≤–µ—Ç–∫–∞ —Å "feature/"
if ! echo "$CURRENT_BRANCH" | grep -q '^feature/'; then
  echo "‚ÑπÔ∏è –í–µ—Ç–∫–∞ $CURRENT_BRANCH –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç pattern 'feature/*' ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–Ω–æ—Å—è—Ç—Å—è"
  exit 0
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ --no-verify
if [ "$HUSKY_GIT_PARAMS" = "--no-verify" ]; then
  echo "‚úÖ –•—É–∫ –ø—Ä–æ–ø—É—â–µ–Ω (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω --no-verify)"
  exit 0
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–∏—Ç merge-–∫–æ–º–º–∏—Ç–æ–º
COMMIT_MSG=$(git log -1 --pretty=%B)
if echo "$COMMIT_MSG" | grep -q '^Merge'; then
  echo "üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω merge-–∫–æ–º–º–∏—Ç ‚Äî changeset –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
  exit 0
fi

CHANGESET_DIR=$(pwd)/.changeset
CHANGESET_FILE=$(find "$CHANGESET_DIR" -type f -name "*.md" -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d' ')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
if [ -f "$CHANGESET_FILE" ]; then
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
  FILE_CONTENT=$(cat "$CHANGESET_FILE" | tr -d '[:space:]')

  if [ -z "$FILE_CONTENT" ] || [ "$FILE_CONTENT" = "-----" ]; then
    echo "üìÑ changeset-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ '---' ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–æ—Å—è—Ç—Å—è"
  else
    echo "üìÑ changeset-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π ‚Äî –ø—É—à —Ä–∞–∑—Ä–µ—à—ë–Ω"
    exit 0
  fi
else
  echo "üìÑ changeset-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
fi

# –ü–∞—Ä—Å–∏–º —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞
commit_type="${COMMIT_MSG%%:*}"
commit_type=$(echo "$commit_type" | tr '[:upper:]' '[:lower:]')
commit_description=$(echo "$COMMIT_MSG" | sed -E 's/^[^:]+: ?//; s/[[:space:]]+$//')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –¥–æ–ø—É—Å—Ç–∏–º—ã–º
case "$commit_type" in
  patch|minor|major) ;;
  *) commit_type="patch"; echo "üìé –¢–∏–ø –∫–æ–º–º–∏—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $commit_type" ;;
esac

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≤–µ—Ç–∫–∞ —Å "feature/"
if echo "$CURRENT_BRANCH" | grep -q '^feature/'; then
  echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É changeset –¥–ª—è –≤–µ—Ç–∫–∏ $CURRENT_BRANCH"

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  if [ ! -f "$CHANGESET_FILE" ]; then
    echo "‚ùå changeset-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—à–∏–±–∫–∞"
    exit 1
  fi

  # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—ë–º 5 —Å—Ç—Ä–æ–∫
  > "$CHANGESET_FILE"
  for i in $(seq 1 5); do
    echo "" >> "$CHANGESET_FILE"
  done

  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ awk
  awk -v type="$commit_type" -v msg="$commit_description" '
  NR == 1 { print "---\n" }
  NR == 2 { print "\"test-changelog-vite\": " type }
  NR == 3 { print "---" }
  NR == 5 { print msg }
  { print }
  ' "$CHANGESET_FILE" > "$CHANGESET_FILE.tmp" && mv "$CHANGESET_FILE.tmp" "$CHANGESET_FILE"
  awk 'NF' "$CHANGESET_FILE" > "$CHANGESET_FILE.tmp" && mv "$CHANGESET_FILE.tmp" "$CHANGESET_FILE"

  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –¥–µ–ª–∞–µ–º –∫–æ–º–º–∏—Ç
  git add "$CHANGESET_FILE"
  git commit -m "changelog update" --no-verify
      echo "üì§ –í—ã–ø–æ–ª–Ω—è–µ–º git commit 'changelog update'"
else
  echo "‚ÑπÔ∏è –í–µ—Ç–∫–∞ $CURRENT_BRANCH –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç pattern 'feature/*' ‚Äî changeset –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
fi