#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º upstream –¥–ª—è –≤–µ—Ç–∫–∏
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

if ! echo "$CURRENT_BRANCH" | grep -q '^feature/'; then
  exit 0
fi


# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ --no-verify
if [ "$HUSKY_GIT_PARAMS" = "--no-verify" ]; then
  echo "‚úÖ –•—É–∫ –ø—Ä–æ–ø—É—â–µ–Ω (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω --no-verify)"
  exit 0
fi

# –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
if [ -f ".git/COMMIT_EDITMSG" ]; then
  COMMIT_MSG=$(cat .git/COMMIT_EDITMSG)
  echo "üìé –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: $COMMIT_MSG"
else
  COMMIT_MSG="feat: unknown commit message"
  echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ .git/COMMIT_EDITMSG"
fi

if echo "$COMMIT_MSG" | grep -q '^Merge'; then
  echo "üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω merge-–∫–æ–º–º–∏—Ç ‚Äî —É–¥–∞–ª—è–µ–º –≤—Å–µ changeset-—Ñ–∞–π–ª—ã"
  
  # –£–¥–∞–ª—è–µ–º –≤—Å–µ .changeset/*.md —Ñ–∞–π–ª—ã
  if [ -d ".changeset" ]; then
    rm -f .changeset/*.md 2>/dev/null || echo "‚ÑπÔ∏è changeset-—Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ"
  fi

  exit 0
fi

# –ü–∞—Ä—Å–∏–º —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞
commit_type="${COMMIT_MSG%%:*}"
commit_type=$(echo "$commit_type" | tr '[:upper:]' '[:lower:]')
commit_description=$(echo "$COMMIT_MSG" | sed -E 's/^[^:]+: ?//; s/[[:space:]]+$//')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –¥–æ–ø—É—Å—Ç–∏–º—ã–º
case "$commit_type" in
  patch|minor|major) ;;
  *) commit_type="patch"; echo "üìé –¢–∏–ø –∫–æ–º–º–∏—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $commit_type" ;;
esac

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≤–µ—Ç–∫–∞ —Å "feature/"
if echo "$CURRENT_BRANCH" | grep -q '^feature/'; then
  echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É changeset –¥–ª—è –≤–µ—Ç–∫–∏ $CURRENT_BRANCH"

  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–∞–π–ª—É changeset
  CHANGESET_DIR=$(pwd)/.changeset
  CHANGESET_FILE=$(find "$CHANGESET_DIR" -type f -name "*.md" -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d' ')

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  if [ ! -f "$CHANGESET_FILE" ]; then
    echo "‚ùå changeset-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—à–∏–±–∫–∞"
    exit 1
  fi

  # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—ë–º 5 —Å—Ç—Ä–æ–∫
  > "$CHANGESET_FILE"
  for i in $(seq 1 5); do
    echo "" >> "$CHANGESET_FILE"
  done

  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ awk
  awk -v type="$commit_type" -v msg="$commit_description" '
  NR == 1 { print "---\n" }
  NR == 2 { print "\"test-changelog-vite\": " type }
  NR == 3 { print "---" }
  NR == 5 { print msg }
  { print }
  ' "$CHANGESET_FILE" > "$CHANGESET_FILE.tmp" && mv "$CHANGESET_FILE.tmp" "$CHANGESET_FILE"
  awk 'NF' "$CHANGESET_FILE" > "$CHANGESET_FILE.tmp" && mv "$CHANGESET_FILE.tmp" "$CHANGESET_FILE"

  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –¥–µ–ª–∞–µ–º –∫–æ–º–º–∏—Ç
  git add "$CHANGESET_FILE"
  git commit -m "changelog update" --no-verify

  # –í—ã–ø–æ–ª–Ω—è–µ–º push
  if [ -n "$CURRENT_BRANCH" ]; then
    echo "üì§ –í—ã–ø–æ–ª–Ω—è–µ–º git push origin $CURRENT_BRANCH"
    git push origin "$CURRENT_BRANCH" --no-verify
    echo "Success"
  else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É –¥–ª—è git push"
    exit 1
  fi
else
  echo "‚ÑπÔ∏è –í–µ—Ç–∫–∞ $CURRENT_BRANCH –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç pattern 'feature/*' ‚Äî changeset –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
fi