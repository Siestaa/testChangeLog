#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Получаем текущую ветку
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

# Проверяем, начинается ли ветка с "feature/"
if [ -z "$CURRENT_BRANCH" ] || ! echo "$CURRENT_BRANCH" | grep -q '^feature/'; then
  echo "ℹ️ Ветка $CURRENT_BRANCH не соответствует pattern 'feature/*' — changeset не обрабатывается"
  exit 0
fi

# Проверяем, есть ли флаг --no-verify
if [ "$HUSKY_GIT_PARAMS" = "--no-verify" ]; then
  echo "✅ Хук пропущен (использован --no-verify)"
  exit 0
fi

# Получаем сообщение последнего коммита
COMMIT_MSG=$(git log -1 --pretty=%B)
echo "📎 Сообщение последнего коммита: $COMMIT_MSG"

# Парсим тип и описание
COMMIT_TYPE="${COMMIT_MSG%%:*}"
COMMIT_TYPE=$(echo "$COMMIT_TYPE" | tr '[:upper:]' '[:lower:]')
COMMIT_DESCRIPTION=$(echo "$COMMIT_MSG" | sed -E 's/^[^:]+: ?//; s/[[:space:]]+$//')

# Проверяем, является ли тип допустимым
case "$COMMIT_TYPE" in
  patch|minor|major) ;;
  *) COMMIT_TYPE="patch"; echo "📎 Тип коммита не указан или некорректен — установлен тип по умолчанию: $COMMIT_TYPE" ;;
esac

# Получаем последний changeset-файл
CHANGESET_DIR=$(pwd)/.changeset
CHANGESET_FILE=$(find "$CHANGESET_DIR" -type f -name "*.md" -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d' ')

# Проверяем, существует ли файл
if [ ! -f "$CHANGESET_FILE" ]; then
  echo "❌ changeset-файл не найден — пуш заблокирован"
  exit 1
fi

# Проверяем, пустой ли файл или содержит только '---'
FILE_CONTENT=$(cat "$CHANGESET_FILE" | tr -d '[:space:]')
if [ -z "$FILE_CONTENT" ] || [ "$FILE_CONTENT" = "-----" ]; then
  echo "📄 changeset-файл пустой — заполняем его"
  
  # Перезаписываем файл с новыми данными
  cat > "$CHANGESET_FILE" <<EOL
---
"test-changelog-vite": $COMMIT_TYPE
---
$COMMIT_DESCRIPTION
---
EOL

ALL_CHANGESET_FILES=$(find "$CHANGESET_DIR" -type f -name "*.md" ! -path "$CHANGESET_FILE")
CURRENT_CONTENT=$(cat "$CHANGESET_FILE" | grep -v '^$' | grep -v '^---$' | sed 's/[[:space:]]*$//')

# Проверяем на дублирование
DUPLICATES_FOUND=false
for OTHER_FILE in $ALL_CHANGESET_FILES; do
  OTHER_CONTENT=$(cat "$OTHER_FILE" | grep -v '^$' | grep -v '^---$' | sed 's/[[:space:]]*$//')

  if [ "$CURRENT_CONTENT" = "$OTHER_CONTENT" ]; then
    echo "❌ Найден дублирующий файл: $OTHER_FILE"
    DUPLICATES_FOUND=true
    break
  fi
done

# Блокируем пуш, если найдены дубликаты
if $DUPLICATES_FOUND; then
  echo "🚫 Найден дублирующий changeset-файл — удаляем текущий файл"
  
  # Удаляем текущий дубликат
  rm -f "$CHANGESET_FILE"
  exit 0
fi

echo "✅ changeset-файл уникален — пуш разрешён"

  git add "$CHANGESET_FILE"
  git commit -m "changelog update" --no-verify
  echo "✅ changeset-файл заполнен и закоммичен"
else
  echo "📄 changeset-файл уже заполнен — пуш разрешён"
fi